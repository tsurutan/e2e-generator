import {HumanMessage, ToolMessage} from '@langchain/core/messages';
import {ChatPromptTemplate} from '@langchain/core/prompts';
import {ChatGoogleGenerativeAI} from '@langchain/google-genai';
import {MultiServerMCPClient} from '@langchain/mcp-adapters';
import {ChatOpenAI} from '@langchain/openai';
import {Injectable, NotFoundException} from '@nestjs/common';
import {ConfigService} from '@nestjs/config';
import {createAllTools} from 'src/llm-utils';
import {PrismaService} from '../prisma/prisma.service';
import {Project, Prisma} from '@prisma/client';
import {CreateProjectDto} from './dto/create-project.dto';
import {UpdateProjectDto} from './dto/update-project.dto';
import {ProjectWithFeatureCount} from './dto/project-with-feature-count.dto';

@Injectable()
export class ProjectsService {
    private readonly llmOpenAI: ChatOpenAI;
    private readonly llmGoogle: ChatGoogleGenerativeAI;

    constructor(private configService: ConfigService, private prisma: PrismaService) {
        this.llmOpenAI = new ChatOpenAI({
            openAIApiKey: this.configService.get<string>('OPENAI_API_KEY'),
            model: 'gpt-4o',
            temperature: 0,
        });
        this.llmGoogle = new ChatGoogleGenerativeAI({
            apiKey: this.configService.get<string>('GOOGLE_API_KEY'),
            model: "gemini-2.0-flash",
            temperature: 0,
        });
    }

    async generateAllResources(projectId: string) {
        try {
            const project = await this.prisma.project.findUnique({
                where: {id: projectId},
            });

            if (!project) {
                throw new NotFoundException(`Project with ID ${projectId} not found`);
            }

            // MCP „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
            const mcpClient = new MultiServerMCPClient({
                playwright: {
                    command: 'npx',
                    args: ['@playwright/mcp@latest', '--headless'],
                },
            });

//             const systemPrompt = `
// ‰ª•‰∏ã„ÅÆURL„ÇíPlaywright-MCP„Åß„ÇØ„É≠„Éº„É™„É≥„Ç∞„Åó„ÄÅÂêÑ„Éö„Éº„Ç∏„ÅÆURL„Å®„Çø„Ç§„Éà„É´„ÇísavePage„Åß‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// Page„ÅØ„Åù„Çå„Åû„ÇåUI„ÅÆÂ§âÂåñ„Å´ÂØæÂøú„Åó„ÅüUIState„ÇíÊåÅ„Å£„Å¶„Åä„Çä„Åæ„Åô„ÄÇ„Åæ„ÅüPage„ÅØ„Éá„Éï„Ç©„É´„Éà„ÅÆÂàùÊúüÁä∂ÊÖãUIState(isDefault=true)„ÇíÊåÅ„Å£„Å¶„Åä„Çä„Åì„ÅÆÁä∂ÊÖã„ÅØÂêÑ„Éö„Éº„Ç∏„Å´ÂøÖ„Åö‰∏Ä„Å§Â≠òÂú®„Åó„Åæ„Åô„ÄÇ
// „Éú„Çø„É≥„ÇíÊäº„Åó„Åü„Çä„Å™„Å©„Åó„Å¶Ë¶ã„ÅüÁõÆ„Å´Â§âÂåñ(„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Åü„Çä„Å™„Å©)„Åå„ÅÇ„Å£„ÅüÂ†¥Âêà„Å´Êñ∞„Åü„Å´UIState„Çí‰ΩúÊàê„Åó„Åü„ÅÑ„Åß„Åô(saveUIState)„ÄÇ
// „Åæ„Åü„Åù„ÅÆUIState„Å∏„Å©„ÅÆ„Çà„ÅÜ„Å´„Åó„Å¶ÈÅ∑Áßª„Åó„Åü„Åã„ÇísaveEdge„Çí‰ΩøÁî®„Åó„Å¶‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË©≥Á¥∞„ÅØdescription„Å´Êõ∏„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åì„ÅÆÂÜÖÂÆπ„ÅØ‰ªäÂæåPlaywright„ÅÆ„Ç≥„Éº„ÉâÁîüÊàê„Å´‰ΩøÁî®„Åï„Çå„Çã„Åì„Å®„ÇíÂâçÊèê„Å´ÊÉÖÂ†±„ÇíÂÖ•„Çå„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// saveEdge„ÅØÈÅ∑ÁßªÂÖÉ„Å®ÈÅ∑ÁßªÂÖà„ÅÆUIState„Å®Page„Åå„ÅÇ„Çâ„Åã„Åò„ÇÅ‰øùÂ≠ò„Åï„Çå„Å™„ÅÑ„Å®Âëº„Å≥Âá∫„Åõ„Åæ„Åõ„Çì„ÄÇ
// „Åï„Çâ„Å´„ÄÅÂêÑ„Éö„Éº„Ç∏„Å´„ÅÇ„ÇãÈáçË¶Å„Å™DOMË¶ÅÁ¥†„Çíname„ÄÅdescription„ÄÅselector(#id, .class, [attribute], data-*, aria-*„Å™„Å©„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ, important! playwright„ÅßÂèñÂæó„Åß„Åç„ÇãÊÉÖÂ†±„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇhtml„ÅÆÊßãÈÄ†„ÅåÂ§â„Çè„Å£„Å¶„ÇÇÂèñÂæó„Åß„Åç„ÇãÂÜÖÂÆπ„ÅåÂ§â„Çè„Çâ„Å™„ÅÑ„Çª„É¨„ÇØ„Çø„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ(ÂèØËÉΩ„Åß„ÅÇ„Çå„Å∞) )„ÄÅelementText‰ªò„Åç„ÅßsaveLabelÈñ¢Êï∞„Çí‰Ωø„Å£„Å¶‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// name, description„ÅØÊó•Êú¨Ë™û„Åß„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ
// Â≠òÂú®„Åó„Å™„ÅÑurl„Å™„Å©„ÇíÁµ∂ÂØæ„Å´ÂÖ•Âäõ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ
// UIState„Çí‰ΩúÊàê„Åó„Åü„ÇâÂøÖ„ÅöEdge„ÇÇËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ(„Éó„É≠„Ç∏„Çß„ÇØ„ÉàURL„ÅÆÂàùÊúüUIState„ÅØ‰æãÂ§ñ„Åß„Åô)
// „Åü„Å†„Åó„Åô„Åß„Å´‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÇígetPages, getLabels, getEdges, getUIStates„ÅßÁ¢∫Ë™ç„Åó„ÄÅÈáçË§á„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// „Åæ„ÅüPlaywright„Åß„ÅØÁîªÈù¢ÂÖ®‰Ωì„Çí„Çπ„ÇØ„É≠„Éº„É´„Åó„Å¶„Åô„Åπ„Å¶„ÅÆË¶ÅÁ¥†„ÇíÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË¶ÅÁ¥†„ÅØÁâπ„Å´button„ÇÑlink„Å™„Å©ÈáçË¶Å„Åù„ÅÜ„Å™Ë¶ÅÁ¥†„ÇíÈõÜ‰∏≠ÁöÑ„Å´ÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// a„É™„É≥„ÇØ„Å™„Å©„ÅßÁîªÈù¢ÈÅ∑Áßª„Åß„Åç„Åù„ÅÜ„Å™ÁÆáÊâÄ„Åå„ÅÇ„Çå„Å∞Á©çÊ•µÁöÑ„Å´ÁîªÈù¢ÈÅ∑Áßª„Çí„Åó„Å¶Êñ∞„Åó„ÅÑ„Éö„Éº„Ç∏„ÅÆË¶ÅÁ¥†„ÇíÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// browser_resize„ÅØ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ
// ÈÅ∑ÁßªÂÖà„ÅØ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàULR„ÅÆorigin„ÅßÂßã„Åæ„Çã„Éö„Éº„Ç∏„ÅÆ„Åø„ÅåÂØæË±°„Åß„Åô„ÄÇ
// „Åæ„Åü„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Å™„Éö„Éº„Ç∏„Åå„ÅÇ„Çå„Å∞‰∏ãË®òË™çË®ºÊÉÖÂ†±„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// email: tsurutan.android@gmail.com
// password: Sample1234
// „Åß„Åô
// „Éó„É≠„Ç∏„Çß„ÇØ„ÉàURLËá™‰Ωì„ÅÆ„Éö„Éº„Ç∏„ÇÇ„ÇØ„É≠„Éº„É™„É≥„Ç∞„ÅÆÂØæË±°„Åß„Åô„ÄÇ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàURL„ÅÆ„Éö„Éº„Ç∏„Åå„Å™„Åë„Çå„Å∞ËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// !Important!
// Áâπ„Å´„É≠„Ç∞„Ç§„É≥„Åô„Çã„Åæ„Åß„ÅÆ„Éï„É≠„Éº„ÅåÈáçË¶Å„Åß„Åô„ÄÇ„É©„Éô„É´„ÇÑUIState„Å™„Å©Â≠òÂú®„Åó„Å¶„ÅÑ„Å™„Åë„Çå„Å∞‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// „Éó„É≠„Ç∏„Çß„ÇØ„ÉàURL„ÅÆÂàùÊúüÁîªÈù¢„ÅåÈáçË¶Å„Åß„Åô„ÄÇ„Åì„ÅÆÁîªÈù¢„ÅÆ„É©„Éô„É´„ÇÑUIState„ÅØÂøÖ„Åö‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
// `
            const systemPrompt = `
### ‚úÖ **LangChain System Prompt**

‰ª•‰∏ã„ÅÆ„É´„Éº„É´„Å´Âæì„ÅÑ„ÄÅPlaywright-MCP„ÇíÁî®„ÅÑ„Å¶Web„Çµ„Ç§„Éà„Çí**„Çπ„ÉÜ„ÉÉ„Éó„Éê„Ç§„Çπ„ÉÜ„ÉÉ„Éó„Åß„ÇØ„É≠„Éº„É™„É≥„Ç∞**„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„Åì„ÅÆ„Éá„Éº„Çø„ÅØ‰ªäÂæå„ÄÅPlaywright„Ç≥„Éº„ÉâËá™ÂãïÁîüÊàê„Å´Ê¥ªÁî®„Åï„Çå„Åæ„Åô„ÄÇ

---

### üîÅ **Êé¢Á¥¢„ÅÆÂü∫Êú¨„Éï„É≠„Éº**

1. **„Éó„É≠„Ç∏„Çß„ÇØ„ÉàURL„ÅÆ„Éö„Éº„Ç∏„ÇíÈñã„Åç„ÄÅ„Åæ„ÅöÂøÖ„Åö‰ª•‰∏ã„ÇíË°å„ÅÜÔºö**

   * \`savePage\`„Åß„Éö„Éº„Ç∏ÊÉÖÂ†±ÔºàURL„ÄÅ„Çø„Ç§„Éà„É´Ôºâ„Çí‰øùÂ≠ò„ÄÇ
   * ÁîªÈù¢„ÇíÊúÄÂæå„Åæ„Åß„Çπ„ÇØ„É≠„Éº„É´„Åó„ÄÅ**ÂÆüÈöõ„Å´Â≠òÂú®„Åô„ÇãË¶ÅÁ¥†„ÅÆ„Åø**„ÇíÊ§úÂá∫„ÄÇ
   * \`saveLabel\`„ÅßÈáçË¶Å„Å™DOMË¶ÅÁ¥†Ôºà„Éú„Çø„É≥„ÄÅ„É™„É≥„ÇØ„Å™„Å©Ôºâ„Çí‰øùÂ≠ò„ÄÇ
   * \`saveUIState\`„ÅßÂàùÊúüÁä∂ÊÖãÔºà\`isDefault: true\`Ôºâ„Çí‰øùÂ≠ò„ÄÇ

     * **„Åì„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅØÈùûÂ∏∏„Å´ÈáçË¶Å„Åß„Åô„ÄÇÁÑ°Ë¶ñ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ**

2. ÂêÑ„É©„Éô„É´Ôºà„Éú„Çø„É≥„Éª„É™„É≥„ÇØÔºâ„Çí1„Å§„Åö„Å§Êìç‰Ωú„Åó„ÄÅUIÂ§âÂåñ„ÇíÁ¢∫Ë™ç„ÄÇ

   * **Ë¶ñË¶öÁöÑÂ§âÂåñÔºà„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÄÅ„É™„Çπ„ÉàÂ±ïÈñã„ÄÅ„Éö„Éº„Ç∏ÈÅ∑Áßª„Å™„Å©Ôºâ„ÇíÊ§úÁü•„Åó„Åü„ÇâÔºö**

     * Êñ∞„Åó„ÅÑ\`UIState\`„Çí‰øùÂ≠ò
     * \`saveEdge\`„Åß„Äå„Å©„ÅÆË¶ÅÁ¥†„Åß„Å©„Çì„Å™Â§âÂåñ„Åå„ÅÇ„Å£„Åü„Åã„Äç„Çí\`description\`‰ªò„Åç„Åß‰øùÂ≠ò
   * ÈÅ∑ÁßªÂÖàURL„Åå„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆorigin„Åß„ÅÇ„Çå„Å∞„ÄÅÊñ∞„Åó„ÅÑ„Éö„Éº„Ç∏„Å®„Åó„Å¶ÂÜçÂ∏∞ÁöÑ„Å´Âá¶ÁêÜ„ÇíÁπ∞„ÇäËøî„Åô

---

### üîê **„É≠„Ç∞„Ç§„É≥„Éï„É≠„Éº„ÅØÊúÄÈáçË¶ÅÂØæË±°„Åß„Åô**

* „É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„ÅÆUIState„ÄÅ„Éú„Çø„É≥„ÇÑÂÖ•ÂäõÊ¨Ñ„ÅÆ„É©„Éô„É´„ÇÇ**‰∏ÅÂØß„Å´‰øùÂ≠ò**„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
* „É≠„Ç∞„Ç§„É≥Âæå„Å´Ë°®Á§∫„Åï„Çå„Çã„Éö„Éº„Ç∏„ÅÆÂàùÊúüÁä∂ÊÖã„ÇÇ\`saveUIState\`„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
* „É≠„Ç∞„Ç§„É≥„Åæ„Åß„ÅÆÁä∂ÊÖãÈÅ∑ÁßªÔºàÂÖ•Âäõ ‚Üí „Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ ‚Üí „É≠„Ç∞„Ç§„É≥ÊàêÂäüÔºâ„Å´„ÅØ**ÈÅ©Âàá„Å™\`saveEdge\`„ÇíÂøÖ„ÅöÊåøÂÖ•**„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

\`\`\`
email: tsurutan.android@gmail.com
password: Sample1234
\`\`\`

---

### üìå **Á¶ÅÊ≠¢‰∫ãÈ†Ö„Å®Ê≥®ÊÑèÁÇπ**

* ‚ùå **Â≠òÂú®„Åó„Å™„ÅÑ„É©„Éô„É´„ÇÑË¶ÅÁ¥†„Çí‰øùÂ≠ò„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ**

  * ‰æãÔºö„Äå„ÅäÈõªË©±„ÅßÁõ∏Ë´á„Äç„Å™„Å©„ÄÅDOM„Å´Â≠òÂú®„Åó„Å™„ÅÑ„ÇÇ„ÅÆ„ÅØÁµ∂ÂØæ„Å´Ë®òÈå≤„Åó„Å™„ÅÑ„Åì„Å®„ÄÇ
* ‚úÖ \`getPages\`, \`getLabels\`, \`getEdges\`, \`getUIStates\`„Åß**‰øùÂ≠òÊ∏à„Åø„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç„Åó„ÄÅÈáçË§áÁôªÈå≤„ÇíÈÅø„Åë„Çã„Åì„Å®**„ÄÇ
* ‚úÖ **ÁîªÈù¢„ÅÆÂÖ®„Çπ„ÇØ„É≠„Éº„É´**„ÇíË°å„Å£„Å¶„ÄÅ„Åô„Åπ„Å¶„ÅÆË°®Á§∫Ë¶ÅÁ¥†„ÇíÊ§úÂá∫„ÄÇ
* ‚úÖ \`saveEdge\`„ÅØ\`from\`„Å®\`to\`„ÅÆUIState„Åä„Çà„Å≥Page„Åå‰øùÂ≠òÊ∏à„Åø„Åß„ÅÇ„Çã„Åì„Å®„ÇíÂâçÊèê„Å´Âëº„Å≥Âá∫„Åô„ÄÇ
* ‚ùå **browser„Çµ„Ç§„Ç∫„ÅÆÂ§âÊõ¥ÔºàresizeÔºâ„ÅØÁ¶ÅÊ≠¢**
* ‚úÖ **Âêå‰∏Ä„Ç™„É™„Ç∏„É≥‰ª•Â§ñ„ÅÆ„Éö„Éº„Ç∏„Å´„ÅØÈÅ∑Áßª„Åó„Å™„ÅÑ„Åì„Å®**
            `
            const humanPrompt = `„Éó„É≠„Ç∏„Çß„ÇØ„ÉàURL: {projectUrl}`;

            const promptTemplate = ChatPromptTemplate.fromMessages([
                ['system', systemPrompt],
                ['human', humanPrompt]
            ]);

            // „Éó„É≠„É≥„Éó„Éà„ÅÆ‰ΩúÊàê„Å®ÂÆüË°å
            const prompt = await promptTemplate.invoke({
                projectUrl: project.url,
            });
            const messages = prompt.messages;

            const playwrightTools = await mcpClient.getTools('playwright');
            const tools = [...createAllTools(this.prisma, projectId), ...playwrightTools]
            const llmWithTools = this.llmGoogle.bind({
                tools,
            });
            console.log('start llm');
            let aiMessage = await llmWithTools.invoke(messages);
            messages.push(aiMessage);
            let count = 0;
            while (true) {
                for (const toolCall of aiMessage.tool_calls) {
                    const selectedTool = tools.find(tool => tool.name === toolCall.name);
                    if (selectedTool) {
                        try {
                            // @ts-ignore
                            const result = await selectedTool.invoke(toolCall);
                            messages.push(result);
                        } catch (e) {
                            console.log(`error = ${e}, handling...`);
                            messages.push(new ToolMessage({
                                tool_call_id: toolCall.id,
                                name: toolCall.name,
                                content: e.message,
                            }));
                            messages.push(new HumanMessage({
                                content: 'The last tool call raised an exception. Try calling the tool again with corrected arguments. Do not repeat mistakes.'
                            }))
                        }
                    }
                }
                aiMessage = await llmWithTools.invoke(messages);
                messages.push(aiMessage);
                if (aiMessage.tool_calls.length === 0) {
                    break;
                }
                count++;
                console.log(`count = ${count}`)
            }
            console.log('finished')
        } catch (e) {
            console.error("error = ", e);
        }
    }

    async findAll(): Promise<ProjectWithFeatureCount[]> {
        // „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„Å®ÂêÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊ©üËÉΩÊï∞„Çí‰∏ÄÂ∫¶„ÅÆ„ÇØ„Ç®„É™„ÅßÂèñÂæó
        const projectsWithFeatureCount = await this.prisma.project.findMany({
            include: {
                _count: {
                    select: {
                        features: true
                    }
                }
            }
        });

        // ÁµêÊûú„Çí ProjectWithFeatureCount „Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÅÆÂΩ¢Âºè„Å´Â§âÊèõ
        return projectsWithFeatureCount.map(project => ({
            ...project,
            featureCount: project._count.features
        }));
    }

    async findOne(id: string): Promise<Project> {
        const project = await this.prisma.project.findUnique({
            where: {id},
        });
        if (!project) {
            throw new NotFoundException(`Project with ID ${id} not found`);
        }
        return project;
    }

    async create(createProjectDto: CreateProjectDto): Promise<Project> {
        return this.prisma.project.create({
            data: createProjectDto,
        });
    }

    async update(id: string, updateProjectDto: UpdateProjectDto): Promise<Project> {
        try {
            return await this.prisma.project.update({
                where: {id},
                data: updateProjectDto,
            });
        } catch (error) {
            if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
                throw new NotFoundException(`Project with ID ${id} not found`);
            }
            throw error;
        }
    }

    async remove(id: string): Promise<void> {
        try {
            await this.prisma.project.delete({
                where: {id},
            });
        } catch (error) {
            if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
                throw new NotFoundException(`Project with ID ${id} not found`);
            }
            throw error;
        }
    }
}
