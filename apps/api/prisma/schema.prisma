// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(100)
  url         String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  features    Feature[]
  labels      Label[]
  personas    Persona[]
  pages       Page[]
  edges       Edge[]
  uiStates    UiState[]

  @@map("projects")
}

model Page {
  title     String
  url       String
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  uiStates  UiState[]

  @@id([projectId, url])
  @@map("pages")
}

model UiState {
  id          String   @id @default(uuid())
  title       String
  description String
  pageUrl     String
  projectId   String
  html        String?
  page        Page     @relation(fields: [pageUrl, projectId], references: [url, projectId])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  fromEdges   Edge[]   @relation("FromUIState")
  toEdges     Edge[]   @relation("ToUIState")
  Label       Label[]
  /// isDefaultのUIStateはページごとに1つだけ存在する
  isDefault   Boolean  @default(false)

  @@map("ui_states")
}

model Edge {
  id            String   @id @default(uuid())
  fromUIStateId String
  fromUIState   UiState  @relation(fields: [fromUIStateId], references: [id], name: "FromUIState")
  toUIStateId   String
  toUIState     UiState  @relation(fields: [toUIStateId], references: [id], name: "ToUIState")
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String
  pageProjectId String?
  triggeredBy   String?  // どの要素をもとにこのUIStateへ遷移したか(Playwrightで要素を取得できる情報)
  triggerType   String?  // clickなどの動作

  @@map("edges")
}

model Feature {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(100)
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id])
  scenarios   Scenario[]

  @@map("features")
}

model Label {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  description String?
  selector    String
  elementText String?
  url         String
  uiStateId   String
  uiState     UiState  @relation(fields: [uiStateId], references: [id])
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("labels")
}

model Scenario {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(200)
  description String?
  given       String
  when        String
  then        String
  featureId   String
  feature     Feature  @relation(fields: [featureId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("scenarios")
}

model Persona {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  email     String
  password  String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("personas")
}
